<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.3.xsd
						 http://www.springframework.org/schema/util
						 http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<description>Shiro 主配置</description>

    <context:property-placeholder location="classpath:config/system.properties" ignore-unresolvable="true"/>

    <!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
    <!--<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehcacheManagerFactory" />
    </bean>-->

    <!-- 凭证匹配器，解密实用，注入到realm中使用 -->
    <!-- 使用自定义的CredentialMatcher，实现了多次尝试密码失败后锁定用户的功能 -->
    <bean id="credentialsMatcher" class="com.hrp.shiro.credential.RetryLimitHashedCredentialsMatcher">
        <constructor-arg name="cacheManager" ref="shiroCacheManager"/>
        <constructor-arg name="cacheName" value="passwordRetryCache" /><!-- 对应ehcache.xml中的passwordRetryCache -->
        <!-- 加密解密的算法要一样，迭代数也是  -->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- AOP式方法级权限检查 -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>-->

	<!-- 继承自AuthorizingRealm的自定义Realm，即指定Shiro验证用户登录的类为自定义的ShiroRealm.java -->
	<bean id="shiroRealm" class="com.hrp.interceptor.shiro.ShiroRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!--<property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.rememeberMe.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/><!-- 单位秒,30天 -->
    </bean>

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度 （128 256 512 位） -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}"/>
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!--<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
        <property name="sessionIdGenerator" ref="sessionIdGenerator" />-->
    </bean>
    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="${shiro.session.validation.interval}"/><!-- 30分钟验证一次会话是否过期 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.cookie.maxAge}"/>
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO" /><!-- session存储的实现 -->
        <property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"/><!-- 会话超时时间 两小时 单位毫秒 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
        <property name="sessionValidationSchedulerEnabled" value="true" /><!-- 定时检查失效的session -->
        <property name="sessionIdCookieEnabled" value="true" />
        <property name="deleteInvalidSessions" value="true" />
        <property name="sessionIdCookie" ref="sessionIdCookie" /><!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    </bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="shiroCacheManager"/>
        <property name="realm" ref="shiroRealm" />
        <property name="rememberMeManager" ref="rememberMeManager" />
        <property name="sessionManager" ref="sessionManager" />
 	</bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 --><!--替换默认的form 验证过滤器-->
    <bean id="formAuthenticationFilter" class="com.hrp.shiro.filter.CustomFormAuthenticationFilter">
        <property name="defaultSuccessUrl" value="${shiro.default.success.url}"/>
        <property name="adminDefaultSuccessUrl" value="${shiro.admin.default.success.url}"/>
        <!--表单上的用户名/密码 下次自动登录的参数名-->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/><!--即rememberMe请求参数名，请求参数是boolean类型，true表示rememberMe。   -->
    </bean>

    <bean id="jCaptchaValidateFilter" class="com.hrp.shiro.filter.JCaptchaValidateFilter">
        <property name="jcaptchaEbabled" value="${shiro.jcaptcha.enable}"/>
        <property name="jcaptchaParam" value="jcaptchaCode"/>
        <property name="jcapatchaErrorUrl" value="${shiro.jcaptcha.error.url}"/>
    </bean>

    <!-- 退出登录过滤器 -->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${shiro.logout.success.url}"/>
    </bean>

    <bean id="monitorFilter" class="com.hrp.filter.MonitorAccessControlFilter"/>

	<!-- Shiro Filter -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="${shiro.login.url}" />
		<!-- 登录成功后要跳转的链接 -->
		<property name="successUrl" value="/" />
		<!-- 用户访问未对其授权的资源时,所显示的链接 -->
		<property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
			/register/** 			    = anon
			/login 			            = authc
			/logout 				    = logout
			/authenticated       	    = authc
			/static/js/** 			    = anon
			/static/css/**        	 	= anon
            /static/fonts/**            = anon
			/static/img/**        	    = anon
            /plugins/**                 = anon
            /swagger/**                 = anon
			/app**/** 					= anon
			/weixin/** 					= anon
			/**							= user
			</value>
		</property>
        <property name="filters">
            <util:map>
                <!--<entry key="authc" value-ref="formAuthenticationFilter" />-->
                <entry key="formAuthc" value-ref="formAuthenticationFilter"/>
                <entry key="jCaptchaValidate" value-ref="jCaptchaValidateFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="monitor" value-ref="monitorFilter" />

                <!--<entry key="kickout" value-ref="kickoutSessionFilter" />-->
            </util:map>
        </property>
	</bean>

    <!-- session 校验单个用户是否多次登录 -->
    <!--<bean id="kickoutSessionFilter" class="com.hrp.filter.KickoutSessionFilter">
        <property name="tokenManager" ref="ehcacheTokenManager" />
    </bean>-->

    <!-- Shiro生命周期处理器  保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>
